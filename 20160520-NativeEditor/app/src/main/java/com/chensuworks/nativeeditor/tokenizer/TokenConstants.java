package com.chensuworks.nativeeditor.tokenizer;

import java.util.HashMap;

public class TokenConstants {

    public static final HashMap<String, Integer> tokenConstants;
    public static final HashMap<Integer, String> tokenValue;
    public static final HashMap<Integer, Integer> tokenCategoryId;

    static {
        tokenConstants  = new HashMap<String, Integer>();

        tokenConstants.put("FUNCTION", 1);
        tokenConstants.put("NESTED", 2);
        tokenConstants.put("IF", 3);
        tokenConstants.put("SWITCH", 4);
        tokenConstants.put("TRY", 5);
        tokenConstants.put("WHILE", 6);
        tokenConstants.put("FOR", 7);
        tokenConstants.put("END", 8);
        tokenConstants.put("ELSE", 9);
        tokenConstants.put("ELSEIF", 10);
        tokenConstants.put("BREAK", 11);
        tokenConstants.put("RETURN", 12);
        tokenConstants.put("PARFOR", 13);
        tokenConstants.put("GLOBAL", 15);
        tokenConstants.put("PERSISTENT", 16);
        tokenConstants.put("CATCH", 20);
        tokenConstants.put("CONTINUE", 21);
        tokenConstants.put("CASE", 22);
        tokenConstants.put("OTHERWISE", 23);
        tokenConstants.put("CLASSDEF", 25);
        tokenConstants.put("PROPERTIES", 28);
        tokenConstants.put("METHODS", 30);
        tokenConstants.put("EVENTS", 31);
        tokenConstants.put("ENUMERATION", 32);
        tokenConstants.put("SPMD", 33);
        tokenConstants.put("PARSECTION", 34);
        tokenConstants.put("SECTION", 35);
        tokenConstants.put("ID", 40);
        tokenConstants.put("EEND", 41);
        tokenConstants.put("INT", 42);
        tokenConstants.put("FLOAT", 43);
        tokenConstants.put("STRING", 44);
        tokenConstants.put("DUAL", 45);
        tokenConstants.put("BANG", 46);
        tokenConstants.put("QUEST", 47);
        tokenConstants.put("SEMI", 50);
        tokenConstants.put("COMMA", 51);
        tokenConstants.put("LP", 52);
        tokenConstants.put("RP", 53);
        tokenConstants.put("LB", 54);
        tokenConstants.put("RB", 55);
        tokenConstants.put("LC", 56);
        tokenConstants.put("RC", 57);
        tokenConstants.put("FEEND", 58);
        tokenConstants.put("TRANS", 60);
        tokenConstants.put("DOTTRANS", 61);
        tokenConstants.put("NOT", 62);
        tokenConstants.put("AT", 63);
        tokenConstants.put("DOLLAR", 64);
        tokenConstants.put("BACKQUOTE", 65);
        tokenConstants.put("DOUBLEQUOTE", 66);
        tokenConstants.put("SHARP", 67);
        tokenConstants.put("PLUS", 70);
        tokenConstants.put("MINUS", 71);
        tokenConstants.put("MUL", 72);
        tokenConstants.put("DIV", 73);
        tokenConstants.put("LDIV", 74);
        tokenConstants.put("EXP", 75);
        tokenConstants.put("COLON", 76);
        tokenConstants.put("DOT", 80);
        tokenConstants.put("DOTMUL", 81);
        tokenConstants.put("DOTDIV", 82);
        tokenConstants.put("DOTLDIV", 83);
        tokenConstants.put("DOTEXP", 84);
        tokenConstants.put("AND", 85);
        tokenConstants.put("OR", 86);
        tokenConstants.put("ANDAND", 87);
        tokenConstants.put("OROR", 88);
        tokenConstants.put("LT", 89);
        tokenConstants.put("GT", 90);
        tokenConstants.put("LE", 91);
        tokenConstants.put("GE", 92);
        tokenConstants.put("EQ", 93);
        tokenConstants.put("NE", 94);
        tokenConstants.put("EQUALS", 95);
        tokenConstants.put("CNE", 96);
        tokenConstants.put("EOL", 100);
        tokenConstants.put("SEOL", 101);
        tokenConstants.put("CEOL", 102);
        tokenConstants.put("IEOL", 103);
        tokenConstants.put("COMMENT", 105);
        tokenConstants.put("BLKSTART", 106);
        tokenConstants.put("BLKCOM", 107);
        tokenConstants.put("BLKEND", 108);
        tokenConstants.put("SECTION_TITLE", 109);
        tokenConstants.put("PRAGMA", 110);
        tokenConstants.put("DOTDOTDOT", 111);
        tokenConstants.put("DOTDOT", 112);
        tokenConstants.put("DEEP_NEST", 113);
        tokenConstants.put("DEEP_STMT", 114);
        tokenConstants.put("WHITE", 116);
        tokenConstants.put("NEGERR", 118);
        tokenConstants.put("SEMERR", 119);
        tokenConstants.put("EOLERR", 120);
        tokenConstants.put("UNTERM", 121);
        tokenConstants.put("BADCHAR", 122);
        tokenConstants.put("DEEP_PAREN", 123);
        tokenConstants.put("FP_ERR", 124);
        tokenConstants.put("RES_ERR", 125);
        tokenConstants.put("DEEP_COM", 126);

    }

    static {
        tokenValue = new HashMap<Integer, String>();

        tokenValue.put(0, "NA");
        tokenValue.put(1, "function");
        tokenValue.put(2, "nested");
        tokenValue.put(3, "if");
        tokenValue.put(4, "switch");
        tokenValue.put(5, "try");
        tokenValue.put(6, "while");
        tokenValue.put(7, "for");
        tokenValue.put(8, "end");
        tokenValue.put(9, "else");
        tokenValue.put(10, "elseif");
        tokenValue.put(11, "break");
        tokenValue.put(12, "return");
        tokenValue.put(13, "parfor");
        tokenValue.put(14, "NA");
        tokenValue.put(15, "global");
        tokenValue.put(16, "persistent");
        tokenValue.put(17, "NA");
        tokenValue.put(18, "NA");
        tokenValue.put(19, "NA");
        tokenValue.put(20, "catch");
        tokenValue.put(21, "continue");
        tokenValue.put(22, "case");
        tokenValue.put(23, "otherwise");
        tokenValue.put(24, "NA");
        tokenValue.put(25, "classdef");
        tokenValue.put(26, "NA");
        tokenValue.put(27, "NA");
        tokenValue.put(28, "properties");
        tokenValue.put(29, "NA");
        tokenValue.put(30, "methods");
        tokenValue.put(31, "events");
        tokenValue.put(32, "enumeration");
        tokenValue.put(33, "reserved_mcos_keyword_33");
        tokenValue.put(34, "spmd");
        tokenValue.put(35, "reserved_mcos_keyword_35");
        tokenValue.put(36, "NA");
        tokenValue.put(37, "NA");
        tokenValue.put(38, "NA");
        tokenValue.put(39, "NA");
        tokenValue.put(40, "ID");
        tokenValue.put(41, "\\<end>");
        tokenValue.put(42, "\\<int>");
        tokenValue.put(43, "\\<float.");
        tokenValue.put(44, "\\<string>");
        tokenValue.put(45, "\\<dual>");
        tokenValue.put(46, "\\<BANG>");
        tokenValue.put(47, "?");
        tokenValue.put(48, "NA");
        tokenValue.put(49, "NA");
        tokenValue.put(50, ";");
        tokenValue.put(51, ");");
        tokenValue.put(52, "(");
        tokenValue.put(53, ");");
        tokenValue.put(54, "[");
        tokenValue.put(55, "]");
        tokenValue.put(56, "{");
        tokenValue.put(57, "}");
        tokenValue.put(58, "NA");
        tokenValue.put(59, "NA");
        tokenValue.put(60, "'");
        tokenValue.put(61, ".'");
        tokenValue.put(62, "~");
        tokenValue.put(63, "@");
        tokenValue.put(64, "$");
        tokenValue.put(65, "`");
        tokenValue.put(66, "\\\\");
        tokenValue.put(67, "#");
        tokenValue.put(68, "NA");
        tokenValue.put(69, "NA");
        tokenValue.put(70, "+");
        tokenValue.put(71, "-");
        tokenValue.put(72, "*");
        tokenValue.put(73, "/");
        tokenValue.put(74, "\\\\\\\\");
        tokenValue.put(75, "^");
        tokenValue.put(76, ",");
        tokenValue.put(77, ",,");
        tokenValue.put(78, "NA");
        tokenValue.put(79, "NA");
        tokenValue.put(80, ".");
        tokenValue.put(81, ".*");
        tokenValue.put(82, "./");
        tokenValue.put(83, ".\\\\");
        tokenValue.put(84, ".^");
        tokenValue.put(85, "&");
        tokenValue.put(86, "|");
        tokenValue.put(87, "&&");
        tokenValue.put(88, "||");
        tokenValue.put(89, "<");
        tokenValue.put(90, ">");
        tokenValue.put(91, "<=");
        tokenValue.put(92, ">=");
        tokenValue.put(93, "==");
        tokenValue.put(94, "~=");
        tokenValue.put(95, "=");
        tokenValue.put(96, "\\<CNE>");
        tokenValue.put(97, "NA");
        tokenValue.put(98, "NA");
        tokenValue.put(99, "NA");
        tokenValue.put(100, "\\<EOL>");
        tokenValue.put(101, "\\<SEOL>");
        tokenValue.put(102, "\\<CEOL>");
        tokenValue.put(103, "\\<IEOL>");
        tokenValue.put(104, "NA");
        tokenValue.put(105, "\\<comment>");
        tokenValue.put(106, "\\<begin block comment>");
        tokenValue.put(107, "\\<block comment>");
        tokenValue.put(108, "\\<end block comment>");
        tokenValue.put(109, "%%");
        tokenValue.put(110, "PRAGMA");
        tokenValue.put(111, "...");
        tokenValue.put(112, "\\<DOT DOT>");
        tokenValue.put(113, "\\<DEEP NEST>");
        tokenValue.put(114, "\\<DEEP STMT>");
        tokenValue.put(115, "NA");
        tokenValue.put(116, "\\<whitespace>");
        tokenValue.put(117, "NA");
        tokenValue.put(118, "\\<NEG ERROR>");
        tokenValue.put(119, "\\<SEM ERROR>");
        tokenValue.put(120, "\\<EOL ERROR>");
        tokenValue.put(121, "\\<unterm string>");
        tokenValue.put(122, "\\<badchar>");
        tokenValue.put(123, "\\<DEEP PAREN>");
        tokenValue.put(124, "NA");
        tokenValue.put(125, "\\<RES ERROR>");
        tokenValue.put(126, "\\<DEEP COM>");
        tokenValue.put(127, "NA");
    }

    static {
        tokenCategoryId = new HashMap<Integer, Integer>();

        tokenCategoryId.put(0, 339);
        tokenCategoryId.put(1, 333);
        tokenCategoryId.put(2, 333);
        tokenCategoryId.put(3, 333);
        tokenCategoryId.put(4, 333);
        tokenCategoryId.put(5, 333);
        tokenCategoryId.put(6, 333);
        tokenCategoryId.put(7, 333);
        tokenCategoryId.put(8, 333);
        tokenCategoryId.put(9, 333);
        tokenCategoryId.put(10, 333);
        tokenCategoryId.put(11, 333);
        tokenCategoryId.put(12, 333);
        tokenCategoryId.put(13, 333);
        tokenCategoryId.put(14, 333);
        tokenCategoryId.put(15, 333);
        tokenCategoryId.put(16, 333);
        tokenCategoryId.put(17, 333);
        tokenCategoryId.put(18, 333);
        tokenCategoryId.put(19, 333);
        tokenCategoryId.put(20, 333);
        tokenCategoryId.put(21, 333);
        tokenCategoryId.put(22, 333);
        tokenCategoryId.put(23, 333);
        tokenCategoryId.put(24, 333);
        tokenCategoryId.put(25, 333);
        tokenCategoryId.put(26, 333);
        tokenCategoryId.put(27, 333);
        tokenCategoryId.put(28, 333);
        tokenCategoryId.put(29, 333);
        tokenCategoryId.put(30, 333);
        tokenCategoryId.put(31, 333);
        tokenCategoryId.put(32, 333);
        tokenCategoryId.put(33, 333);
        tokenCategoryId.put(34, 333);
        tokenCategoryId.put(35, 333);
        tokenCategoryId.put(44, 44);
        tokenCategoryId.put(45, 45);
        tokenCategoryId.put(46, 338);
        tokenCategoryId.put(64, 122);
        tokenCategoryId.put(65, 122);
        tokenCategoryId.put(66, 122);
        tokenCategoryId.put(67, 122);
        tokenCategoryId.put(105, 105);
        tokenCategoryId.put(106, 106);
        tokenCategoryId.put(107, 107);
        tokenCategoryId.put(108, 108);
        tokenCategoryId.put(109, 109);
        tokenCategoryId.put(110, 110);
        tokenCategoryId.put(111, 333);
        tokenCategoryId.put(121, 337);
        tokenCategoryId.put(122, 122);
        tokenCategoryId.put(125, 122);
    }

    public static String getValueOfToken(Integer id) {
        return tokenValue.get(id);
    }

    public static Integer getCategoryOfToken(Integer id) {
        return tokenCategoryId.get(id);
    }
}
